{"title":"마무리로 정리는 따로 진행하기 않겠습니다. GAN 실행으로 마무리 하겠습니다.","markdown":{"yaml":{"title":"마무리로 정리는 따로 진행하기 않겠습니다. GAN 실행으로 마무리 하겠습니다."},"headingText":"**` 적대적 신경망 실행하기 `**","containsRefs":false,"markdown":"\n\n\n\n\n\n\n---\n\n\n생성자 : **`G()`**\n>\n판별자 : **`D()`**\n>\n>\n<br>\n\n\n### `진행형식`\n---\ninput(그림형태) \n<br>\n=>\n<br>\n생성자 : `D(G(input))`\n<br>\n=>\n<br>\n생성된 그림 : `G(input)`\n<br>\n=>\n<br>\n판별자 : `진짜? : D(G(input))=0` or `가짜? : D(x)=1`\n---\n\n만들어야하는 것 :\n<br>\n`D(G(input)` 과 실제 `D(x)` 를 판별자가 더는 구별못하게 `정확도 = 0.5` 에 가까워지면 생성자의 역할이 종료\n\n`코드` : **현재 코드는 GAN 중 페이스북의 AI 연구팀이 만든 DCGAN 입니다**\n\n# `코드` : 그룹나누기\n`[1]`\n```python\nginput= Input(shape=(100,))\ndis_output= discriminator(generator(ginput))\ngan = Model(ginput,dis_output)\ngan.compile(loss='binary_crossentropy', optimizer='adam')\n```\n\n**`[2]`**\n```python\ndef gan_train(epoch, batch_size, saving_interval):\n    (X_train, _), (_, _) = mnist.load_data()  # 들여쓰기 및 괄호 오류 수정\n    X_train = X_train.reshape(X_train.shape[0], 28, 28, 1).astype('float32')\n    X_train = (X_train - 127.5) / 127.5\n    true = np.ones((batch_size, 1))\n    fake = np.zeros((batch_size, 1))\n\n    for i in range(epoch):\n        idx = np.random.randint(0, X_train.shape[0], batch_size)\n        imgs = X_train[idx]\n        d_loss_real = discriminator.train_on_batch(imgs, true)\n\n        noise = np.random.normal(0, 1, (batch_size, 100))\n        gen_imgs = generator.predict(noise)\n        d_loss_fake = discriminator.train_on_batch(gen_imgs, fake)\n\n        d_loss = 0.5 * np.add(d_loss_real, d_loss_fake)  # d_loss 계산 수정\n        g_loss = gan.train_on_batch(noise, true)\n\n        print('epoch:%d' % i, 'd_loss:%.4f' % d_loss, 'g_loss:%.4f' % g_loss)\n\n        if i % saving_interval == 0:\n            noise = np.random.normal(0, 1, (25, 100))\n            gen_imgs = generator.predict(noise)\n            gen_imgs = 0.5 * gen_imgs + 0.5\n\n            fig, axs = plt.subplots(5, 5)\n            count = 0\n            for j in range(5):\n                for k in range(5):\n                    axs[j, k].imshow(gen_imgs[count, :, :, 0], cmap='gray')\n                    axs[j, k].axis('off')\n                    count += 1\n            fig.savefig(\"gan_images/gan_mnist_%d.png\" % i)  # 들여쓰기 및 변수명 수정\n\ngan_train(4001, 32, 200)  # 함수 호출 위치 수정\n```\n\n### -  `[GAN 해석] `\n\n`[1]`\n```python\nginput= Input(shape=(100,))\ndis_output= discriminator(generator(ginput))\ngan = Model(ginput,dis_output)\ngan.compile(loss='binary_crossentropy', optimizer='adam')\n```\n- 이 코드는 생성자와 판별자 모델을 연결시키는 gan 모델입니다.\n- input : keras.layers 의 함수로 인풋의 크기를 `shape`로 받습니다.\n- dis_output : D(G(input)) 을 수행하고 있습니다. - input 에 generator 모델을 쭉 돌리고 discriminator 모델을 쭉 돌린 것입니다.\n- gan : Model(ginput,dis_output) 은 keras.models 의 함수로 Model(a,b) 로 a 에는 input\n\n`[2]`\n```python\ndef gan_train(epoch, batch_size, saving_interval):\n```\n\n\n ### `-` 신경망을 실행시키는 함수로 그 내부는 이렇게 작용합니다.\n \n `MNIST 데이터 불러오기` <br>\n `MNIST 의 이미지 활용`<br>\n `실제 데이터 판별자에 입력`<br>\n `가상 이미지를 판별자에 입력`<br>\n `판별자와 생성자의 오차 계산`<br>\n `gan_images 저장시키기.`<br>\n `4000번마다 (batch_size=32) 200번마다 결과 저장`<br>\n\n`-` GAN full model writing\n\n1. import\n2. 생성자모델 만드기\n3. 판별자모델만들기\n4. 생성자와 판별자 모델 연결시키는 gan 모델 만들기\n5. 신경망실행함수 만들기\n6. 신경망실행함수 실행하여 결과보기\n\n결과적으로 \n\n### 구분할 수 없는 이미지 만들었다는데 아직 보완이 필요해 보입니다.\n- 사람이 보았을 때 누가봐도 컴퓨터가 만든거잖아!\n","srcMarkdownNoYaml":"\n\n\n\n\n\n\n---\n\n### **` 적대적 신경망 실행하기 `**\n\n생성자 : **`G()`**\n>\n판별자 : **`D()`**\n>\n>\n<br>\n\n\n### `진행형식`\n---\ninput(그림형태) \n<br>\n=>\n<br>\n생성자 : `D(G(input))`\n<br>\n=>\n<br>\n생성된 그림 : `G(input)`\n<br>\n=>\n<br>\n판별자 : `진짜? : D(G(input))=0` or `가짜? : D(x)=1`\n---\n\n만들어야하는 것 :\n<br>\n`D(G(input)` 과 실제 `D(x)` 를 판별자가 더는 구별못하게 `정확도 = 0.5` 에 가까워지면 생성자의 역할이 종료\n\n`코드` : **현재 코드는 GAN 중 페이스북의 AI 연구팀이 만든 DCGAN 입니다**\n\n# `코드` : 그룹나누기\n`[1]`\n```python\nginput= Input(shape=(100,))\ndis_output= discriminator(generator(ginput))\ngan = Model(ginput,dis_output)\ngan.compile(loss='binary_crossentropy', optimizer='adam')\n```\n\n**`[2]`**\n```python\ndef gan_train(epoch, batch_size, saving_interval):\n    (X_train, _), (_, _) = mnist.load_data()  # 들여쓰기 및 괄호 오류 수정\n    X_train = X_train.reshape(X_train.shape[0], 28, 28, 1).astype('float32')\n    X_train = (X_train - 127.5) / 127.5\n    true = np.ones((batch_size, 1))\n    fake = np.zeros((batch_size, 1))\n\n    for i in range(epoch):\n        idx = np.random.randint(0, X_train.shape[0], batch_size)\n        imgs = X_train[idx]\n        d_loss_real = discriminator.train_on_batch(imgs, true)\n\n        noise = np.random.normal(0, 1, (batch_size, 100))\n        gen_imgs = generator.predict(noise)\n        d_loss_fake = discriminator.train_on_batch(gen_imgs, fake)\n\n        d_loss = 0.5 * np.add(d_loss_real, d_loss_fake)  # d_loss 계산 수정\n        g_loss = gan.train_on_batch(noise, true)\n\n        print('epoch:%d' % i, 'd_loss:%.4f' % d_loss, 'g_loss:%.4f' % g_loss)\n\n        if i % saving_interval == 0:\n            noise = np.random.normal(0, 1, (25, 100))\n            gen_imgs = generator.predict(noise)\n            gen_imgs = 0.5 * gen_imgs + 0.5\n\n            fig, axs = plt.subplots(5, 5)\n            count = 0\n            for j in range(5):\n                for k in range(5):\n                    axs[j, k].imshow(gen_imgs[count, :, :, 0], cmap='gray')\n                    axs[j, k].axis('off')\n                    count += 1\n            fig.savefig(\"gan_images/gan_mnist_%d.png\" % i)  # 들여쓰기 및 변수명 수정\n\ngan_train(4001, 32, 200)  # 함수 호출 위치 수정\n```\n\n### -  `[GAN 해석] `\n\n`[1]`\n```python\nginput= Input(shape=(100,))\ndis_output= discriminator(generator(ginput))\ngan = Model(ginput,dis_output)\ngan.compile(loss='binary_crossentropy', optimizer='adam')\n```\n- 이 코드는 생성자와 판별자 모델을 연결시키는 gan 모델입니다.\n- input : keras.layers 의 함수로 인풋의 크기를 `shape`로 받습니다.\n- dis_output : D(G(input)) 을 수행하고 있습니다. - input 에 generator 모델을 쭉 돌리고 discriminator 모델을 쭉 돌린 것입니다.\n- gan : Model(ginput,dis_output) 은 keras.models 의 함수로 Model(a,b) 로 a 에는 input\n\n`[2]`\n```python\ndef gan_train(epoch, batch_size, saving_interval):\n```\n\n\n ### `-` 신경망을 실행시키는 함수로 그 내부는 이렇게 작용합니다.\n \n `MNIST 데이터 불러오기` <br>\n `MNIST 의 이미지 활용`<br>\n `실제 데이터 판별자에 입력`<br>\n `가상 이미지를 판별자에 입력`<br>\n `판별자와 생성자의 오차 계산`<br>\n `gan_images 저장시키기.`<br>\n `4000번마다 (batch_size=32) 200번마다 결과 저장`<br>\n\n`-` GAN full model writing\n\n1. import\n2. 생성자모델 만드기\n3. 판별자모델만들기\n4. 생성자와 판별자 모델 연결시키는 gan 모델 만들기\n5. 신경망실행함수 만들기\n6. 신경망실행함수 실행하여 결과보기\n\n결과적으로 \n\n### 구분할 수 없는 이미지 만들었다는데 아직 보완이 필요해 보입니다.\n- 사람이 보았을 때 누가봐도 컴퓨터가 만든거잖아!\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"output-file":"[9] 마무리 GAN 실행과해석.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":"cosmo","title-block-banner":true,"title":"마무리로 정리는 따로 진행하기 않겠습니다. GAN 실행으로 마무리 하겠습니다."},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}